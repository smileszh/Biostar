
# The name of the organism.
NAME ?= yeast_dna

# The number of reads.
N ?= 100000

# The label to use in the output filenames.
LABEL = ${N}

# The SRR number to use.
SRR ?= ERR6391595

# The URL for the CDNA
URL ?= https://ftp.ensembl.org/pub/release-110/fasta/saccharomyces_cerevisiae/dna/Saccharomyces_cerevisiae.R64-1-1.dna.toplevel.fa.gz

# The number of CPUs to use.
NCPU ?= 7

# Which tool to test
TOOL = bwa

# The full path to the module
MODULE = src/run/${TOOL}.mk

# The timing command.
# Advanced use TIME=src/run/time.sh
TIME ?= time

# The name of the reference file
REF ?= refs/${NAME}.fa.gz
R1 ?= reads/${NAME}_${SRR}_${LABEL}_1.fq
R2 ?= reads/${NAME}_${SRR}_${LABEL}_2.fq

# The name of the alignment files.
BAM ?= bam/${NAME}_${TOOL}_${SRR}_${LABEL}.bam
VCF ?= vcf/${NAME}_${TOOL}_${SRR}_${LABEL}.vcf.gz

# Mode of operation
MODE ?= SE

# A file that contains data listing
DESIGN = design.csv

# Apply Makefile customizations.
.DELETE_ON_ERROR:
SHELL := bash
.ONESHELL:
.SHELLFLAGS := -eu -o pipefail -c
MAKEFLAGS += --warn-undefined-variables --no-print-directory

usage:
	@echo "#"
	@echo "# Use the source, Luke!"
	@echo "#"
	@echo "# URL=${URL}"
	@echo "# NAME=${NAME}"
	@echo "# REF=${REF}"
	@echo "# TOOL=${TOOL}"
	@echo "# SRR=${SRR}"
	@echo "# R1=${R1}"
	@echo "#"

# Obtain the reference sequence.
# Need to recompress with bgzip.
${REF}:
	${TIME} make -f src/run/aria.mk run FILE=${REF} URL=${URL}
	${TIME} make -f src/run/bgzip.mk run FILE=${REF}
	${TIME} samtools faidx ${REF}

# Trigger the genome download
genome: ${REF}
	@ls -lh ${REF}

# Index the reference sequence.
index: ${REF}
	${TIME} make -f ${MODULE} index REF=${REF}

# Obtain the fastq data.
fastq:
	${TIME} make -f src/run/sra.mk run SRR=${SRR} N=${N} R1=${R1} R2=${R2}


# Align as single end even if data is paired.
align:
ifeq ($(MODE),SE)
	${TIME} make -f ${MODULE} run REF=${REF} R1=${R1} NCPU=${NCPU} BAM=${BAM}
else
	${TIME} make -f ${MODULE} run REF=${REF} R1=${R1} R2=${R2} NCPU=${NCPU} BAM=${BAM}
endif

# Call the variants.
vcf: run
	${TIME} make -f src/run/bcftools_parallel.mk run REF=${REF} BAM=${BAM} VCF=${VCF} NCPU=${NCPU}

# Run the short pipeline
run: genome index fastq align

# Remove generated files
clean:
	rm -rf bam salmon tmp vcf

# Remove all files generated by this Makefile.
realclean: clean
	rm -rf refs reads logs timelog.txt vcf design.csv

# Create the genome file.
${DESIGN}:
	@cat << EOF > ${DESIGN}
	action,name,tool,srr,url
	vcf,yeast_dna,bwa,ERR6391595,https://ftp.ensembl.org/pub/release-110/fasta/saccharomyces_cerevisiae/dna/Saccharomyces_cerevisiae.R64-1-1.dna.toplevel.fa.gz
	vcf,droso_dna,bwa,DRR255468,https://ftp.ensembl.org/pub/release-110/fasta/drosophila_melanogaster/dna/Drosophila_melanogaster.BDGP6.46.dna.toplevel.fa.gz
	vcf,rice_dna,bwa,SRR27406354,https://ftp.ensemblgenomes.ebi.ac.uk/pub/plants/release-58/fasta/oryza_sativa/dna/Oryza_sativa.IRGSP-1.0.dna.toplevel.fa.gz
	vcf,zfish_dna,bwa,ERR12058121,https://ftp.ensembl.org/pub/release-110/fasta/danio_rerio/dna/Danio_rerio.GRCz11.dna.primary_assembly.fa.gz
	vcf,human_dna,bwa,SRR6808334,https://ftp.ensembl.org/pub/release-110/fasta/homo_sapiens/dna/Homo_sapiens.GRCh38.dna.primary_assembly.fa.gz
	run,yeast_dna,hisat2,SRR27401845,https://ftp.ensembl.org/pub/release-110/fasta/saccharomyces_cerevisiae/dna/Saccharomyces_cerevisiae.R64-1-1.dna.toplevel.fa.gz
	run,droso_dna,hisat2,SRR27429790,https://ftp.ensembl.org/pub/release-110/fasta/drosophila_melanogaster/dna/Drosophila_melanogaster.BDGP6.46.dna.toplevel.fa.gz
	run,rice_dna,hisat2,SRR27558827,https://ftp.ensemblgenomes.ebi.ac.uk/pub/plants/release-58/fasta/oryza_sativa/dna/Oryza_sativa.IRGSP-1.0.dna.toplevel.fa.gz
	run,zfish_dna,hisat2,SRR27496346,https://ftp.ensembl.org/pub/release-110/fasta/danio_rerio/dna/Danio_rerio.GRCz11.dna.primary_assembly.fa.gz
	run,human_dna,hisat2,SRR27558299,https://ftp.ensembl.org/pub/release-110/fasta/homo_sapiens/dna/Homo_sapiens.GRCh38.dna.primary_assembly.fa.gz
	run,yeast_cdna,salmon,SRR27401845,https://ftp.ensembl.org/pub/release-110/fasta/saccharomyces_cerevisiae/cdna/Saccharomyces_cerevisiae.R64-1-1.cdna.all.fa.gz
	run,droso_cdna,salmon,SRR27429790,https://ftp.ensembl.org/pub/release-110/fasta/drosophila_melanogaster/cdna/Drosophila_melanogaster.BDGP6.46.cdna.all.fa.gz
	run,rice_cdna,salmon,SRR27558827,https://ftp.ensemblgenomes.ebi.ac.uk/pub/plants/release-58/fasta/oryza_sativa/cdna/Oryza_sativa.IRGSP-1.0.cdna.all.fa.gz
	run,zfish_cdna,salmon,SRR27496346,https://ftp.ensembl.org/pub/release-110/fasta/danio_rerio/cdna/Danio_rerio.GRCz11.cdna.all.fa.gz
	run,human_cdna,salmon,SRR27558299,https://ftp.ensembl.org/pub/release-110/fasta/homo_sapiens/cdna/Homo_sapiens.GRCh38.cdna.all.fa.gz
	run,yeast_dna,star,SRR27401845,https://ftp.ensembl.org/pub/release-110/fasta/saccharomyces_cerevisiae/dna/Saccharomyces_cerevisiae.R64-1-1.dna.toplevel.fa.gz
	run,droso_dna,star,SRR27429790,https://ftp.ensembl.org/pub/release-110/fasta/drosophila_melanogaster/dna/Drosophila_melanogaster.BDGP6.46.dna.toplevel.fa.gz
	run,rice_dna,star,SRR27558827,https://ftp.ensemblgenomes.ebi.ac.uk/pub/plants/release-58/fasta/oryza_sativa/dna/Oryza_sativa.IRGSP-1.0.dna.toplevel.fa.gz
	run,zfish_dna,star,SRR27496346,https://ftp.ensembl.org/pub/release-110/fasta/danio_rerio/dna/Danio_rerio.GRCz11.dna.primary_assembly.fa.gz
	run,human_dna,star,SRR27558299,https://ftp.ensembl.org/pub/release-110/fasta/homo_sapiens/dna/Homo_sapiens.GRCh38.dna.primary_assembly.fa.gz
	EOF
	@echo "# Created the design: ${DESIGN}"

# Show the design.
design: ${DESIGN}
	@ls -l $<

# How many seconds to sleep between test runs.
SLEEP=1

# Allows the computer to sleep to cool down
sleep:
	sleep ${SLEEP}


# Runs a complete test.
all: ${DESIGN}
	@echo "set -uex"
	@cat ${DESIGN} |  parallel --header : --colsep , --lb -j 1 \
		echo ${TIME} make -f src/workflows/benchmark.mk \
		{action} \
		NAME={name} \
		TOOL={tool} \
		NCPU=${NCPU} \
		N=${N} \
		SRR={srr} \
		URL={url} \
		TIME=${TIME}

# Prints only the genone fetch commands.
all_genomes: ${DESIGN}
	@echo "set -uex"
	@cat ${DESIGN} |  parallel --header : --colsep , --lb -j 1 \
		echo ${TIME} make -f src/workflows/benchmark.mk \
		genome sleep NAME={name} URL={url} LABEL=genome SLEEP=${SLEEP} TIME=${TIME} | sort -r | uniq

# Prints only the index generation commands.
all_indices: ${DESIGN}
	@echo "set -uex"
	@cat ${DESIGN} |  parallel --header : --colsep , --lb -j 1 \
		echo ${TIME} make -f src/workflows/benchmark.mk \
		index sleep TOOL={tool} NAME={name} URL={url} LABEL=build  NCPU=${NCPU} SLEEP=${SLEEP} TIME=${TIME} | sort -r | uniq

# Prints only the FASTQ fetching commands.
all_fastq: ${DESIGN}
	@echo "set -uex"
	@cat ${DESIGN} |  parallel --header : --colsep , --lb -j 1 \
		echo ${TIME} make -f src/workflows/benchmark.mk \
		fastq sleep NAME={name} SRR={srr} N=${N} LABEL=${LABEL} TOOL={tool} TIME=${TIME}

# Prints only the alignment commands.
all_aln: ${DESIGN}
	@echo "set -uex"
	@cat ${DESIGN} |  parallel --header : --colsep , --lb -j 1 \
		echo ${TIME} make -f src/workflows/benchmark.mk \
		align sleep TOOL={tool} NAME={name} SRR={srr} N=${N} NCPU=${NCPU} SLEEP=${SLEEP} MODE=${MODE} LABEL=${LABEL} TIME=${TIME}

# Prints only the VCF calling commands.
all_vcf: ${DESIGN}
	@echo "set -uex"
	@cat ${DESIGN} |  parallel --header : --colsep , --lb -j 1 \
		echo ${TIME} make -f src/workflows/benchmark.mk \
		vcf sleep TOOL={tool} NAME={name} SRR={srr} N=${N} NCPU=${NCPU} SLEEP=${SLEEP} LABEL=${LABEL} TIME=${TIME}

# Generate a flagstat on the output
stat:
	samtools flagstat ${BAM}

install:
	@echo micromamba create -y -n bench python=3.10 star bwa samtools hisat2 salmon bedtools bcftools ucsc-bedgraphtobigwig parallel aria2 make=4 seqkit

# A separate salmon benchmark for full data.
URL1=https://ftp.ensembl.org/pub/release-110/fasta/homo_sapiens/cdna/Homo_sapiens.GRCh38.cdna.all.fa.gz
URL2=https://ftp.sra.ebi.ac.uk/vol1/fastq/SRR103/008/SRR1039508/SRR1039508_1.fastq.gz

airway:

	# Download the human transcriptome data
	${TIME} make -f src/run/aria.mk run URL=${URL1} FILE=refs/human_cdna.fa.gz

	# Index the human transcriptome
	${TIME} make -f src/run/salmon.mk index REF=refs/human_cdna.fa.gz NCPU=${NCPU}

	# Download the FASTQ data.
	${TIME} make -f src/run/aria.mk run URL=${URL2} FILE=reads/airway.fastq.gz

	# Align with salmon.
	${TIME} make -f src/run/salmon.mk run R1=reads/airway.fastq.gz REF=refs/human_cdna.fa.gz SAMPLE=airway NCPU=${NCPU}


.PHONY: genome index fastq align vcf run run_vcf clean realclean design sleep all_commands all_genomes all_indices all_fastq all_aln all_vcf stat install
