#
# Parallel SNP calling on split BAM files.
#

# The number of reads to obtain.
N ?= 1000000

# The number of processes to run.
NCPU = 4

# The SRR number to use.
SRR ?= SRR6808334

# First read in pair.
R1=reads/${SRR}_1.fastq

# Second read in pair.
R2=reads/${SRR}_2.fastq

# The alignment file.
BAM ?= bam/${SRR}.bam

# The variants generated by bcftools file.
VCF ?= vcf/${SRR}.vcf.gz

# The reference genome.
REF ?= $(shell refgenie seek hg38/fasta)

# The genome index.
IDX ?= $(shell refgenie seek hg38/bwa_index)

# Alignment module.
ALN ?= src/run/bwa.mk

# Variant caller module.
SNP ?= src/run/bcftools.mk

# Apply Makefile customizations.
SHELL := bash
.ONESHELL:
.SHELLFLAGS := -eu -o pipefail -c
.DELETE_ON_ERROR:
MAKEFLAGS += --warn-undefined-variables --no-print-directory

# Print some usage information
usage:
	@echo "#"
	@echo "# SNP caller evaluation "
	@echo "#"
	@echo "# ALN=${ALN}"
	@echo "# SNP=${SNP}"
	@echo "#"
	@echo "# SRR=${SRR} NCPU=${NCPU}"
	@echo "#"
	@echo "# R1=${R1}"
	@echo "# R2=${R2}"
	@echo "#"
	@echo "# REF=${REF}"
	@echo "# IDX=${IDX}"
	@echo "#"
	@echo "# BAM=${BAM}"
	@echo "# VCF=${VCF}"
	@echo "#"
	@echo "# make fastq align split call vcf SRR=${SRR} N=${N} NCPU=${NCPU}"
	@echo "#"

# Programs required for this pipeline
TOOLS = refgenie bwa bcftools

# A rule to check if each program is installed
check:
	@$(foreach tool,$(TOOLS),\
		if ! command -v $(tool) > /dev/null; then \
			echo "# Error: $(tool) is not installed"; \
			exit 1; \
		fi;)

# Runs the entire pipeline.
run: fastq align split call merge

# Download the FASTQ files.
fastq:
	make -f src/run/sra.mk SRR=${SRR} N=${N} run

# Show the index.
index:
	ls -lh ${IDX}.*

# Generate the alignment
align: check
	make -f ${ALN} \
		REF=${REF} \
		IDX=${IDX} \
		R1=${R1} \
		R2=${R2} \
		BAM=${BAM} \
		NCPU=${NCPU} \
		ID=${SRR} LIB=${SRR} SM=${SRR} \
		run

# Split the BAM alignment by chromosomes.
split: check
	mkdir -p tmp
	parallel echo 'chr{}' ::: {1..22} X Y | parallel -v --eta -j ${NCPU} \
		make -f src/run/splitchrom.mk \
		BAM=${BAM} \
		OUT=tmp/${SRR}.{}.bam \
		CHROM={} run

# Calls variants on the split BAM files.
call: split
	parallel echo 'chr{}' ::: {1..22} X Y | parallel -v --eta -j ${NCPU} \
		make -f ${SNP} \
		REF=${REF} \
		BAM=tmp/${SRR}.{}.bam \
		VCF=tmp/${SRR}.{}.vcf.gz \
		run

# Merges the variants into a single VCF file.
${VCF}: check call
	mkdir -p $(dir ${VCF})
	parallel echo 'chr{}' ::: {1..22} X Y | parallel --header : --colsep , -j 1 echo tmp/${SRR}.{}.vcf.gz | \
	parallel --xargs 'bcftools concat {} -o ${VCF}'
	bcftools index -t -f ${VCF}

# Trigger the merge.
merge: check ${VCF}
	@ls -lh ${VCF}

# Undo the merge.
merge!:
	rm -rf ${VCF}

# These targets are not files
.PHONY: usage align fastq split call merge run check

